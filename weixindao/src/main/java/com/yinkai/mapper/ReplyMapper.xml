<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yinkai.mapper.ReplyMapper">
  <resultMap id="BaseResultMap" type="com.yinkai.entities.Reply">
    <id column="reply_id" jdbcType="INTEGER" property="replyId" />
    <result column="topic_id" jdbcType="INTEGER" property="topicId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="createtime" jdbcType="TIMESTAMP" property="createtime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.yinkai.entities.Reply">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    reply_id, topic_id, user_id, createtime
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.yinkai.entities.ReplyExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.yinkai.entities.ReplyExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from reply
    where reply_id = #{replyId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from reply
    where reply_id = #{replyId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.yinkai.entities.ReplyExample">
    delete from reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yinkai.entities.Reply">
    insert into reply (reply_id, topic_id, user_id,
    createtime, content)
    values (#{replyId,jdbcType=INTEGER}, #{topicId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER},
    #{createtime,jdbcType=TIMESTAMP}, #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.yinkai.entities.Reply">
    insert into reply
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="replyId != null">
        reply_id,
      </if>
      <if test="topicId != null">
        topic_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="createtime != null">
        createtime,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="replyId != null">
        #{replyId,jdbcType=INTEGER},
      </if>
      <if test="topicId != null">
        #{topicId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
    <selectKey keyProperty="replyId" order="AFTER" resultType="Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>

  </insert>
  <select id="countByExample" parameterType="com.yinkai.entities.ReplyExample" resultType="java.lang.Long">
    select count(*) from reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update reply
    <set>
      <if test="record.replyId != null">
        reply_id = #{record.replyId,jdbcType=INTEGER},
      </if>
      <if test="record.topicId != null">
        topic_id = #{record.topicId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.createtime != null">
        createtime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update reply
    set reply_id = #{record.replyId,jdbcType=INTEGER},
    topic_id = #{record.topicId,jdbcType=INTEGER},
    user_id = #{record.userId,jdbcType=INTEGER},
    createtime = #{record.createtime,jdbcType=TIMESTAMP},
    content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update reply
    set reply_id = #{record.replyId,jdbcType=INTEGER},
    topic_id = #{record.topicId,jdbcType=INTEGER},
    user_id = #{record.userId,jdbcType=INTEGER},
    createtime = #{record.createtime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.yinkai.entities.Reply">
    update reply
    <set>
      <if test="topicId != null">
        topic_id = #{topicId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="createtime != null">
        createtime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where reply_id = #{replyId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.yinkai.entities.Reply">
    update reply
    set topic_id = #{topicId,jdbcType=INTEGER},
    user_id = #{userId,jdbcType=INTEGER},
    createtime = #{createtime,jdbcType=TIMESTAMP},
    content = #{content,jdbcType=LONGVARCHAR}
    where reply_id = #{replyId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yinkai.entities.Reply">
    update reply
    set topic_id = #{topicId,jdbcType=INTEGER},
    user_id = #{userId,jdbcType=INTEGER},
    createtime = #{createtime,jdbcType=TIMESTAMP}
    where reply_id = #{replyId,jdbcType=INTEGER}
  </update>

  <!--自定义-->
  <sql id="reply_sql1">
     r.reply_id AS replyId,t.topic_id AS topicId,r.user_id AS userId,u.nickname,u.sex,i.name AS headImage,r.createtime,r.content,s.`name` AS school
   </sql>
  <!--getReplyByTopicId-->
  <select id="getReplyByTopicId" resultType="com.yinkai.entities.custom.ReplyCustom">
    SELECT
   <include refid="reply_sql1"/>
    FROM `reply` AS r
    LEFT JOIN topic AS t ON r.topic_id=t.topic_id
    LEFT JOIN user AS u ON u.user_id=r.user_id
    LEFT JOIN school s ON s.school_id=u.school_id
    LEFT JOIN image AS i ON i.image_id=u.headImage_id
    WHERE t.topic_id=#{topicId,jdbcType=INTEGER}
    ORDER BY createtime DESC
  </select>
  <!-- List<ReplyCustom> findAllReply();-->
  <select id="findAllReply" resultType="com.yinkai.entities.custom.ReplyCustom">
    SELECT
    <include refid="reply_sql1"/>
    FROM `reply` AS r
    LEFT JOIN topic AS t ON r.topic_id=t.topic_id
    LEFT JOIN user AS u ON u.user_id=r.user_id
    LEFT JOIN school s ON s.school_id=u.school_id
    LEFT JOIN image AS i ON i.image_id=u.headImage_id
  </select>

  <!-- int deleteReplyByTopicId(Integer topicId);-->
  <delete id="deleteReplyByTopicId" parameterType="Integer">
        DELETE r
        FROM reply AS r
        LEFT JOIN topic AS t ON r.topic_id=t.topic_id
        WHERE t.topic_id=#{topicId,jdbcType=INTEGER}
  </delete>

</mapper>