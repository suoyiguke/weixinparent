<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yinkai.mapper.TopicMapper">
    <resultMap id="BaseResultMap" type="com.yinkai.entities.Topic">
        <id column="topic_id" jdbcType="INTEGER" property="topicId"/>
        <result column="forum_id" jdbcType="INTEGER" property="forumId"/>
        <result column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="createtime" jdbcType="TIMESTAMP" property="createtime"/>
        <result column="type" jdbcType="INTEGER" property="type"/>
        <result column="replycount" jdbcType="INTEGER" property="replycount"/>
        <result column="lastreply" jdbcType="VARCHAR" property="lastreply"/>
        <result column="lastupdatetime" jdbcType="DATE" property="lastupdatetime"/>
        <result column="likenum" jdbcType="INTEGER" property="likenum"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.yinkai.entities.Topic">
        <result column="content" jdbcType="LONGVARCHAR" property="content"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        topic_id, forum_id, user_id, title, createtime, type, replycount, lastreply, lastupdatetime,
        likenum
    </sql>
    <sql id="Blob_Column_List">
        content
    </sql>
    <select id="selectByExampleWithBLOBs" parameterType="com.yinkai.entities.TopicExample"
            resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from topic
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" parameterType="com.yinkai.entities.TopicExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from topic
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from topic
        where topic_id = #{topicId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from topic
        where topic_id = #{topicId,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.yinkai.entities.TopicExample">
        delete from topic
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.yinkai.entities.Topic">
        insert into topic (topic_id, forum_id, user_id,
        title, createtime, type,
        replycount, lastreply, lastupdatetime,
        likenum, content)
        values (#{topicId,jdbcType=INTEGER}, #{forumId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER},
        #{title,jdbcType=VARCHAR}, #{createtime,jdbcType=TIMESTAMP}, #{type,jdbcType=INTEGER},
        #{replycount,jdbcType=INTEGER}, #{lastreply,jdbcType=VARCHAR}, #{lastupdatetime,jdbcType=DATE},
        #{likenum,jdbcType=INTEGER}, #{content,jdbcType=LONGVARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.yinkai.entities.Topic">
        insert into topic
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="topicId != null">
                topic_id,
            </if>
            <if test="forumId != null">
                forum_id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="title != null">
                title,
            </if>
            <if test="createtime != null">
                createtime,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="replycount != null">
                replycount,
            </if>
            <if test="lastreply != null">
                lastreply,
            </if>
            <if test="lastupdatetime != null">
                lastupdatetime,
            </if>
            <if test="likenum != null">
                likenum,
            </if>
            <if test="content != null">
                content,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="topicId != null">
                #{topicId,jdbcType=INTEGER},
            </if>
            <if test="forumId != null">
                #{forumId,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="title != null">
                #{title,jdbcType=VARCHAR},
            </if>
            <if test="createtime != null">
                #{createtime,jdbcType=TIMESTAMP},
            </if>
            <if test="type != null">
                #{type,jdbcType=INTEGER},
            </if>
            <if test="replycount != null">
                #{replycount,jdbcType=INTEGER},
            </if>
            <if test="lastreply != null">
                #{lastreply,jdbcType=VARCHAR},
            </if>
            <if test="lastupdatetime != null">
                #{lastupdatetime,jdbcType=DATE},
            </if>
            <if test="likenum != null">
                #{likenum,jdbcType=INTEGER},
            </if>
            <if test="content != null">
                #{content,jdbcType=LONGVARCHAR},
            </if>
        </trim>
        <selectKey keyProperty="topicId" order="AFTER" resultType="Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>

    </insert>
    <select id="countByExample" parameterType="com.yinkai.entities.TopicExample" resultType="java.lang.Long">
        select count(*) from topic
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update topic
        <set>
            <if test="record.topicId != null">
                topic_id = #{record.topicId,jdbcType=INTEGER},
            </if>
            <if test="record.forumId != null">
                forum_id = #{record.forumId,jdbcType=INTEGER},
            </if>
            <if test="record.userId != null">
                user_id = #{record.userId,jdbcType=INTEGER},
            </if>
            <if test="record.title != null">
                title = #{record.title,jdbcType=VARCHAR},
            </if>
            <if test="record.createtime != null">
                createtime = #{record.createtime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.type != null">
                type = #{record.type,jdbcType=INTEGER},
            </if>
            <if test="record.replycount != null">
                replycount = #{record.replycount,jdbcType=INTEGER},
            </if>
            <if test="record.lastreply != null">
                lastreply = #{record.lastreply,jdbcType=VARCHAR},
            </if>
            <if test="record.lastupdatetime != null">
                lastupdatetime = #{record.lastupdatetime,jdbcType=DATE},
            </if>
            <if test="record.likenum != null">
                likenum = #{record.likenum,jdbcType=INTEGER},
            </if>
            <if test="record.content != null">
                content = #{record.content,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update topic
        set topic_id = #{record.topicId,jdbcType=INTEGER},
        forum_id = #{record.forumId,jdbcType=INTEGER},
        user_id = #{record.userId,jdbcType=INTEGER},
        title = #{record.title,jdbcType=VARCHAR},
        createtime = #{record.createtime,jdbcType=TIMESTAMP},
        type = #{record.type,jdbcType=INTEGER},
        replycount = #{record.replycount,jdbcType=INTEGER},
        lastreply = #{record.lastreply,jdbcType=VARCHAR},
        lastupdatetime = #{record.lastupdatetime,jdbcType=DATE},
        likenum = #{record.likenum,jdbcType=INTEGER},
        content = #{record.content,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update topic
        set topic_id = #{record.topicId,jdbcType=INTEGER},
        forum_id = #{record.forumId,jdbcType=INTEGER},
        user_id = #{record.userId,jdbcType=INTEGER},
        title = #{record.title,jdbcType=VARCHAR},
        createtime = #{record.createtime,jdbcType=TIMESTAMP},
        type = #{record.type,jdbcType=INTEGER},
        replycount = #{record.replycount,jdbcType=INTEGER},
        lastreply = #{record.lastreply,jdbcType=VARCHAR},
        lastupdatetime = #{record.lastupdatetime,jdbcType=DATE},
        likenum = #{record.likenum,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.yinkai.entities.Topic">
        update topic
        <set>
            <if test="forumId != null">
                forum_id = #{forumId,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="title != null">
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="createtime != null">
                createtime = #{createtime,jdbcType=TIMESTAMP},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=INTEGER},
            </if>
            <if test="replycount != null">
                replycount = #{replycount,jdbcType=INTEGER},
            </if>
            <if test="lastreply != null">
                lastreply = #{lastreply,jdbcType=VARCHAR},
            </if>
            <if test="lastupdatetime != null">
                lastupdatetime = #{lastupdatetime,jdbcType=DATE},
            </if>
            <if test="likenum != null">
                likenum = #{likenum,jdbcType=INTEGER},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where topic_id = #{topicId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.yinkai.entities.Topic">
        update topic
        set forum_id = #{forumId,jdbcType=INTEGER},
        user_id = #{userId,jdbcType=INTEGER},
        title = #{title,jdbcType=VARCHAR},
        createtime = #{createtime,jdbcType=TIMESTAMP},
        type = #{type,jdbcType=INTEGER},
        replycount = #{replycount,jdbcType=INTEGER},
        lastreply = #{lastreply,jdbcType=VARCHAR},
        lastupdatetime = #{lastupdatetime,jdbcType=DATE},
        likenum = #{likenum,jdbcType=INTEGER},
        content = #{content,jdbcType=LONGVARCHAR}
        where topic_id = #{topicId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.yinkai.entities.Topic">
    update topic
    set forum_id = #{forumId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      createtime = #{createtime,jdbcType=TIMESTAMP},
      type = #{type,jdbcType=INTEGER},
      replycount = #{replycount,jdbcType=INTEGER},
      lastreply = #{lastreply,jdbcType=VARCHAR},
      lastupdatetime = #{lastupdatetime,jdbcType=DATE},
      likenum = #{likenum,jdbcType=INTEGER}
    where topic_id = #{topicId,jdbcType=INTEGER}
  </update>
    <!--自定义-->

    <sql id="admin_sql1">
      u.headImage_id AS headImageId,u.sex,t.topic_id as topicId,t.title,t.content,t.createtime,t.replycount,t.likenum,t.type,f.`name` as forumName,f.forum_id AS forumId,u.nickname,s.`name` as schoolName

    </sql>

    <sql id="admin_sql2">
         t.topic_id as topicId,t.title,t.content,t.createtime,t.replycount,t.likenum,t.type,u.nickname,u.sex,s.`name` as schoolName,u.headImage_id AS headImageId
    </sql>

    <select id="findAllTopic" resultType="com.yinkai.entities.custom.TopicCustom">
        SELECT
        <include refid="admin_sql1"></include>
        FROM
        `topic` as t
        LEFT JOIN forum as f ON f.forum_id=t.forum_id
        LEFT JOIN `user` as u ON u.user_id=t.user_id
        LEFT JOIN school as s ON u.school_id=s.school_id

    </select>

    <select id="findTopicByUserId" resultType="com.yinkai.entities.custom.TopicCustom"
            parameterType="java.lang.Integer">
        SELECT
        <include refid="admin_sql1"></include>
        FROM
        `topic` as t
        LEFT JOIN forum as f ON f.forum_id=t.forum_id
        LEFT JOIN `user` as u ON u.user_id=t.user_id
        LEFT JOIN school as s ON u.school_id=s.school_id
        WHERE u.user_id = #{userId,jdbcType=INTEGER}
    </select>

    <!--  List<TopicCustom> findUserLikeTopic(Integer userId);-->
    <select id="findUserLikeTopic" resultType="com.yinkai.entities.custom.TopicCustom"
            parameterType="java.lang.Integer">
        SELECT
        <include refid="admin_sql1"></include>
        FROM
        `topic` as t
        LEFT JOIN user_topic as ut ON ut.topic_id=t.topic_id
        LEFT JOIN `user` as u ON ut.user_id=u.user_id
        LEFT JOIN school as s ON u.school_id=s.school_id
        LEFT JOIN forum as f ON f.forum_id=t.forum_id
        WHERE u.user_id = #{userId,jdbcType=INTEGER}
    </select>

    <update id="addOneLikeNum" parameterType="java.lang.Integer">
     UPDATE topic SET topic.likenum=topic.likenum+1 WHERE topic.topic_id=#{topicId,jdbcType=INTEGER}
    </update>

    <update id="deleteOneLikeNum" parameterType="java.lang.Integer">
        UPDATE topic SET topic.likenum=topic.likenum-1 WHERE topic.topic_id=#{topicId,jdbcType=INTEGER}
    </update>


    <select id="findTopicByLike" resultType="com.yinkai.entities.custom.TopicCustom"
            parameterType="com.yinkai.entities.vo.SearchTopicVo">
        SELECT
        <include refid="admin_sql1"></include>
        FROM
        `topic` as t
        LEFT JOIN forum as f ON f.forum_id=t.forum_id
        LEFT JOIN `user` as u ON u.user_id=t.user_id
        LEFT JOIN school as s ON u.school_id=s.school_id

        <where>
            <if test="topic.title!=null and topic.title!=''">
                AND t.title LIKE '%${topic.title}%'
            </if>

            <if test="topic.forumId!=null and topic.forumId!=''">
                AND f.forum_id = #{topic.forumId,jdbcType=INTEGER}
            </if>
            <if test="topic.userId!=null and topic.userId!=''">
                AND u.user_id = #{topic.userId,jdbcType=INTEGER}
            </if>

            <if test="schoolId!=null and schoolId!=''">
                AND s.school_id = #{schoolId,jdbcType=INTEGER}
            </if>
            <if test="startDate!=null and endDate!=null">
                AND t.createtime BETWEEN #{startDate} AND #{endDate}
            </if>
        </where>

    </select>

    <!-- List<TopicCustom> findTopicBySchoolId(Integer schoolId);-->
    <select id="findTopicBySchoolId" parameterType="Integer" resultType="com.yinkai.entities.custom.TopicCustom">
        SELECT
        <include refid="admin_sql1"></include>
        FROM `topic` AS t
        LEFT JOIN forum as f ON f.forum_id=t.forum_id
        LEFT JOIN `user` AS u ON t.user_id=u.user_id
        LEFT JOIN school AS s ON u.school_id=s.school_id
        WHERE s.school_id=#{schoolId,jdbcType=INTEGER} AND f.forum_id=0
        ORDER BY createtime DESC
    </select>

    <!-- List<TopicCustom> findOtherTopicBySchoolId(Integer schoolId);-->
    <select id="findOtherTopicBySchoolId" parameterType="Integer" resultType="com.yinkai.entities.custom.TopicCustom">
        SELECT
        <include refid="admin_sql1"></include>
        FROM
        `topic` as t
        LEFT JOIN forum as f ON f.forum_id=t.forum_id
        LEFT JOIN `user` as u ON u.user_id=t.user_id
        LEFT JOIN school as s ON u.school_id=s.school_id
        WHERE f.forum_id=#{forumId,jdbcType=INTEGER}
        order by createtime DESC

    </select>

    <!--TopicCustom findTopicById(Integer topicId);-->
    <select id="findTopicById" parameterType="Integer" resultType="com.yinkai.entities.custom.TopicCustom">
        SELECT
        <include refid="admin_sql2"></include>
        FROM `topic` AS t
        LEFT JOIN `user` AS u ON t.user_id=u.user_id
        LEFT JOIN school AS s ON u.school_id=s.school_id
        WHERE t.topic_id=#{param1,jdbcType=INTEGER}

    </select>

    <!-- List<TopicCustom> getLikeTopicPageQuery(String openId);-->
    <select id="getLikeTopicPageQuery" parameterType="String" resultType="com.yinkai.entities.custom.TopicCustom">
        SELECT
        <include refid="admin_sql1"></include>
        FROM
        `topic` as t
        LEFT JOIN user_topic as ut ON ut.topic_id=t.topic_id
        LEFT JOIN `user` as u ON ut.user_id=u.user_id
        LEFT JOIN school as s ON u.school_id=s.school_id
        LEFT JOIN forum as f ON f.forum_id=t.forum_id
        WHERE u.open_id = #{openId}

    </select>
    <!--addOneReplyNumber-->
    <update id="addOneReplyNumber" parameterType="Integer">
        UPDATE topic SET topic.replycount=topic.replycount+1 WHERE topic.topic_id=#{topicId,jdbcType=INTEGER}
    </update>

    <!--List<TopicCustom> findTopicByOpenId(String openId);-->
    <select id="findTopicByOpenId" parameterType="String" resultType="com.yinkai.entities.custom.TopicCustom">
        SELECT
        <include refid="admin_sql1"></include>
        FROM `topic` AS t
        LEFT JOIN `user` AS u ON t.user_id=u.user_id
        LEFT JOIN school AS s ON u.school_id=s.school_id
        LEFT JOIN forum as f ON f.forum_id=t.forum_id
        WHERE u.open_id = #{openId}
        ORDER BY t.createtime DESC

    </select>

    <!--    int deleteTopicByOpenId(String openId, Integer topicId);-->
    <delete id="deleteTopicByOpenId" parameterType="Object">

        DELETE topic
        FROM topic,user
        where topic.user_id=`user`.user_id
        AND `user`.open_id=#{param1,jdbcType=VARCHAR}
        AND topic.topic_id=#{param2,jdbcType=INTEGER}
    </delete>

      <!-- Integer getForumIdByTopicId(Integer topicId);-->
    <select id="getForumIdByTopicId" parameterType="Integer" resultType="Integer">
        SELECT topic.forum_id AS forumId
        FROM topic
        WHERE topic.topic_id=#{topicId}
    </select>

    <!--     Topic getTopicByTopicId(Integer topicId);-->
    <select id="getTopicByTopicId" parameterType="Integer" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"></include>
        FROM topic
        WHERE topic.topic_id=#{topicId}
    </select>


</mapper>